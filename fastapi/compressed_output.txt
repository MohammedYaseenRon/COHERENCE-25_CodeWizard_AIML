# --- source: github repository https://github.com/omkarpathak/resumeparser --- # --- github file: readme.md --- # resumeparser simple resume parser used extracting information resumes/cvs note: wrapper around pyresparser. actual source code parsing found here: [https://github.com/omkarpathak/pyresparser](https://github.com/omkarpathak/pyresparser) # installation ```bash pip install pyresparser ``` # gui - django used - easy extraction interpretation using gui - running gui execute: ```bash python resume_parser/manage.py makemigrations python resume_parser/manage.py migrate python resume_parser/manage.py runserver ``` - visit `127.0.0.1` view gui # working: ![working](results/resume_parser_result.png) # running app docker - install docker-compose - execute following commands root project - build images `docker-compose build` - starting containers services `docker-compose -d` - visit `localhost:8080` browser run app # result module would return list dictionary objects result follows: ``` [ { 'education': [('be', '2014')], 'email': 'omkarpathak27@gmail.com', 'mobile_number': '8087996634', 'name': 'omkar pathak', 'skills': [ 'flask', 'django', 'mysql', 'c', 'css', 'html', 'js', 'machine learning', 'c++', 'algorithms', 'github', 'php', 'python', 'opencv' ] } ] ``` # - [x] extracting experience - [ ] extracting projects - [ ] extracting hobbies - [ ] extracting universities - [ ] extracting month passing - [ ] extracting awards/ achievements/ recognition # references helped get - [https://www.kaggle.com/nirant/hitchhiker-s-guide-to-nlp-in-spacy](https://www.kaggle.com/nirant/hitchhiker-s-guide-to-nlp-in-spacy) - [https://www.analyticsvidhya.com/blog/2017/04/natural-language-processing-made-easy-using-spacy-%e2%80%8bin-python/](https://www.analyticsvidhya.com/blog/2017/04/natural-language-processing-made-easy-using-spacy-%e2%80%8bin-python/) - [https://medium.com/@divalicious.priya/information-extraction-from-cv-acec216c3f48](https://medium.com/@divalicious.priya/information-extraction-from-cv-acec216c3f48) # --- github file: resume_parser/cli.py --- # author: omkar pathak import os import argparse pprint import pprint resume_parser.resume_parser import resumeparser import multiprocessing mp def print_cyan(text): print("\033[96m {}\033[00m" .format(text)) class resumeparsercli(object): def __init__(self): self.__parser = argparse.argumentparser() self.__parser.add_argument('-f', '--file', help="resume file extracted") self.__parser.add_argument('-d', '--directory', help="directory containing resumes extracted") return def extract_resume_data(self): args = self.__parser.parse_args() args.file args.directory: return self.__extract_from_file(args.file) elif args.directory args.file: return self.__extract_from_directory(args.directory) else: return 'invalid option. please provide valid option.' def __extract_from_file(self, file): os.path.exists(file): print_cyan('extracting data from: {}'.format(file)) resume_parser = resumeparser(file) return [resume_parser.get_extracted_data()] else: return 'file found. please provide valid file name.' def __extract_from_directory(self, directory): os.path.exists(directory): pool = mp.pool(mp.cpu_count()) resumes = [] data = [] root, directories, filenames os.walk(directory): filename filenames: file = os.path.join(root, filename) resumes.append(file) results = pool.map(resume_result_wrapper, resumes) pool.close() pool.join() return results else: return 'directory found. please provide valid directory.' def resume_result_wrapper(resume): print_cyan('extracting data from: {}'.format(resume)) parser = resumeparser(resume) return parser.get_extracted_data() __name__ == '__main__': cli_obj = resumeparsercli() pprint(cli_obj.extract_resume_data()) # --- github file: resume_parser/manage.py --- #!/usr/bin/env python import os import sys __name__ == '__main__': os.environ.setdefault('django_settings_module', 'resume_parser.settings') try: django.core.management import execute_from_command_line except importerror exc: raise importerror( "couldn't import django. sure installed " "available pythonpath environment variable? " "forget activate virtual environment?" ) exc execute_from_command_line(sys.argv) # --- github file: resume_parser/parser_app/__init__.py --- # --- github file: resume_parser/parser_app/admin.py --- django.contrib import admin .models import resume @admin.register(resume) class resumeadmin(admin.modeladmin): pass # --- github file: resume_parser/parser_app/apps.py --- django.apps import appconfig class parserappconfig(appconfig): name = 'parser_app' # --- github file: resume_parser/parser_app/migrations/0001_initial.py --- # generated django 2.1.4 2018-12-29 12:15 django.db import migrations, models class migration(migrations.migration): initial = true dependencies = [ ] operations = [ migrations.createmodel( name='uploadresume', fields=[ ('id', models.autofield(auto_created=true, primary_key=true, serialize=false, verbose_name='id')), ('file', models.filefield(upload_to='resumes/', verbose_name='upload resumes')), ], ), ] # --- github file: resume_parser/parser_app/migrations/0002_auto_20181229_1358.py --- # generated django 2.1.4 2018-12-29 13:58 django.db import migrations, models class migration(migrations.migration): dependencies = [ ('parser_app', '0001_initial'), ] operations = [ migrations.createmodel( name='resume', fields=[ ('id', models.autofield(auto_created=true, primary_key=true, serialize=false, verbose_name='id')), ('resume', models.filefield(upload_to='resumes/', verbose_name='upload resumes')), ('name', models.charfield(max_length=255, verbose_name='name')), ('email', models.charfield(max_length=255, verbose_name='email')), ('mobile_number', models.integerfield()), ], ), migrations.deletemodel( name='uploadresume', ), ] # --- github file: resume_parser/parser_app/migrations/0003_auto_20181229_1401.py --- # generated django 2.1.4 2018-12-29 14:01 django.db import migrations, models class migration(migrations.migration): dependencies = [ ('parser_app', '0002_auto_20181229_1358'), ] operations = [ migrations.alterfield( model_name='resume', name='email', field=models.charfield(blank=true, max_length=255, null=true, verbose_name='email'), ), migrations.alterfield( model_name='resume', name='mobile_number', field=models.integerfield(blank=true, null=true), ), migrations.alterfield( model_name='resume', name='name', field=models.charfield(blank=true, max_length=255, null=true, verbose_name='name'), ), ] # --- github file: resume_parser/parser_app/migrations/0004_auto_20181229_1433.py --- # generated django 2.1.4 2018-12-29 14:33 django.db import migrations, models class migration(migrations.migration): dependencies = [ ('parser_app', '0003_auto_20181229_1401'), ] operations = [ migrations.alterfield( model_name='resume', name='email', field=models.charfield(blank=true, max_length=255, null=true, unique=true, verbose_name='email'), ), ] # --- github file: resume_parser/parser_app/migrations/0005_auto_20181229_1444.py --- # generated django 2.1.4 2018-12-29 14:44 django.db import migrations, models class migration(migrations.migration): dependencies = [ ('parser_app', '0004_auto_20181229_1433'), ] operations = [ migrations.alterfield( model_name='resume', name='email', field=models.charfield(blank=true, max_length=255, null=true, verbose_name='email'), ), ] # --- github file: resume_parser/parser_app/migrations/0006_auto_20181229_1447.py --- # generated django 2.1.4 2018-12-29 14:47 django.db import migrations, models class migration(migrations.migration): dependencies = [ ('parser_app', '0005_auto_20181229_1444'), ] operations = [ migrations.alterfield( model_name='resume', name='mobile_number', field=models.charfield(blank=true, max_length=255, null=true, verbose_name='mobile number'), ), ] # --- github file: resume_parser/parser_app/migrations/0007_resume_uploaded_on.py --- # generated django 2.1.4 2018-12-30 02:56 django.db import migrations, models import django.utils.timezone class migration(migrations.migration): dependencies = [ ('parser_app', '0006_auto_20181229_1447'), ] operations = [ migrations.addfield( model_name='resume', name='uploaded_on', field=models.datetimefield(auto_now_add=true, default=django.utils.timezone.now, verbose_name='uploaded on'), preserve_default=false, ), ] # --- github file: resume_parser/parser_app/migrations/0008_auto_20181230_0303.py --- # generated django 2.1.4 2018-12-30 03:03 django.db import migrations, models class migration(migrations.migration): dependencies = [ ('parser_app', '0007_resume_uploaded_on'), ] operations = [ migrations.addfield( model_name='resume', name='education', field=models.charfield(blank=true, max_length=255, null=true, verbose_name='education'), ), migrations.addfield( model_name='resume', name='skills', field=models.charfield(blank=true, max_length=1000, null=true, verbose_name='skills'), ), ] # --- github file: resume_parser/parser_app/migrations/0009_resume_experience.py --- # generated django 2.1.4 2019-01-12 03:28 django.db import migrations, models class migration(migrations.migration): dependencies = [ ('parser_app', '0008_auto_20181230_0303'), ] operations = [ migrations.addfield( model_name='resume', name='experience', field=models.charfield(blank=true, max_length=1000, null=true, verbose_name='experience'), ), ] # --- github file: resume_parser/parser_app/migrations/0010_resume_competencies.py --- # generated django 2.1.4 2019-03-07 15:43 django.db import migrations, models class migration(migrations.migration): dependencies = [ ('parser_app', '0009_resume_experience'), ] operations = [ migrations.addfield( model_name='resume', name='competencies', field=models.charfield(blank=true, max_length=1000, null=true, verbose_name='skills'), ), ] # --- github file: resume_parser/parser_app/migrations/0011_auto_20191022_1356.py --- # generated django 2.2 2019-10-22 13:56 django.db import migrations, models class migration(migrations.migration): dependencies = [ ('parser_app', '0010_resume_competencies'), ] operations = [ migrations.removefield( model_name='resume', name='competencies', ), migrations.addfield( model_name='resume', name='college_name', field=models.charfield(blank=true, max_length=1000, null=true, verbose_name='college name'), ), migrations.addfield( model_name='resume', name='company_name', field=models.charfield(blank=true, max_length=1000, null=true, verbose_name='company name'), ), migrations.addfield( model_name='resume', name='designation', field=models.charfield(blank=true, max_length=1000, null=true, verbose_name='designation'), ), migrations.addfield( model_name='resume', name='total_experience', field=models.charfield(blank=true, max_length=1000, null=true, verbose_name='total experience (in years)'), ), ] # --- github file: resume_parser/parser_app/migrations/__init__.py --- # --- github file: resume_parser/parser_app/models.py --- django.db import models django import forms django.forms import clearablefileinput # deleting media files record deleted django.db.models.signals import post_delete django.dispatch import receiver class resume(models.model): resume = models.filefield('upload resumes', upload_to='resumes/') name = models.charfield('name', max_length=255, null=true, blank=true) email = models.charfield('email', max_length=255, null=true, blank=true) mobile_number = models.charfield('mobile number', max_length=255, null=true, blank=true) education = models.charfield('education', max_length=255, null=true, blank=true) skills = models.charfield('skills', max_length=1000, null=true, blank=true) company_name = models.charfield('company name', max_length=1000, null=true, blank=true) college_name = models.charfield('college name', max_length=1000, null=true, blank=true) designation = models.charfield('designation', max_length=1000, null=true, blank=true) experience = models.charfield('experience', max_length=1000, null=true, blank=true) uploaded_on = models.datetimefield('uploaded on', auto_now_add=true) total_experience = models.charfield('total experience (in years)', max_length=1000, null=true, blank=true) class uploadresumemodelform(forms.modelform): class meta: model = resume fields = ['resume'] widgets = { 'resume': clearablefileinput(attrs={'multiple': true}), } # delete resume files associated object record @receiver(post_delete, sender=resume) def submission_delete(sender, instance, **kwargs): instance.resume.delete(false) # --- github file: resume_parser/parser_app/templates/base.html --- <!doctype html> {% load static %} {% load active %} {% load crispy_forms_tags %} <html lang="en"> <head> <!-- required meta tags --> <meta charset="utf-8"> <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no"> <!-- facebook cards --> <meta property="og:description" content="a fun project store learning book read"/> <meta property="og:url" content=""/> <meta property="og:image" content="{% static 'images/logomark.png' %}"/> <meta property="og:type" content="website"/> <meta property="og:site_name" content="bookworm"/> <!-- twitter cards --> <meta name="twitter:card" content="summary"> <meta name="twitter:site" content="@omkarpathak27"> <meta name="twitter:creator" content="omkar pathak"> <meta name="twitter:title" content= "bookworm"> <meta name="twitter:description" content="a fun project store learning book read"> <meta name="twitter:creator" content="omkar pathak"> <meta name="twitter:image:src" content="{% static 'images/logomark.png' %}"> <meta name="twitter:domain" content="https://www.omkarpathak.in"> <!-- bootstrap css --> <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-gn5384xqq1aowxa+058rxpxpg6fy4iwvtnh0e263xmfcjlsawiggfaw/dais6jxm" crossorigin="anonymous"> <!-- google font --> <link href="https://fonts.googleapis.com/css?family=poppins" rel="stylesheet"> <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.3.1/css/all.css" integrity="sha384-mzrme5qonljuremfsqc01sb46jvros7bzs3io2emffsd15uhvit+y8vef7n7fwau" crossorigin="anonymous"> <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/jquery-ui.css" type="text/css" media="all" /> <link rel="stylesheet" href="{% static 'css/custom.css' %}"> <link rel="shortcut icon" href="{% static 'images/logomarkv2.ico' %}"> <title>{% block title %}{% endblock %}</title> </head> <body style="font-family: 'poppins', sans-serif;"> {% include 'navbar.html' %} <div class="container-fluid"> {% include 'messages.html' %} {% form %} <div class="row"> <div class="col-lg-5 col-md-5"></div> <div class="col-lg-6 col-md-6"> <form method="post" enctype="multipart/form-data" action="{% url 'homepage' %}" style="margin-top: 2%; margin-bottom: 3%"> {% csrf_token %} {{ form|crispy }} <button type="submit" id="import" name="import" class="btn btn-success" style="margin-top: 2%; border-radius: 0">upload</button> </form> </div> </div> {% elif resumes %} <div class="row"> <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12"> <a href="{% url 'homepage' %}"> <button class="btn btn-success" style="margin-bottom: 10px; border-radius: 0;">upload more</button> </a> </div> </div> <div class="row"> <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12"> <table class="table table-bordered table-striped table-responsive"> <thead> <tr> <th>#</th> <th>resume file</th> <th>name</th> <th>email</th> <th>mobile number</th> <th>education</th> <th>company names</th> <th>designation</th> <th>college name</th> <th>total experience years</th> <th>skills</th> <th>experience</th> </tr> </thead> <tbody> {% resume resumes %} <tr> <td>{{forloop.counter}}</td> <td><a href="{{resume.resume.url}}" target="_blank">{{resume.resume.url|truncatechars:20}}</a></td> <td>{{resume.name}}</td> <td>{{resume.email}}</td> <td>{{resume.mobile_number}}</td> <td>{{resume.education}}</td> <td>{{resume.company_names}}</td> <td>{{resume.designation}}</td> <td>{{resume.college_name}}</td> <td>{{resume.total_experience}}</td> <td>{{resume.skills}}</td> <td>{{resume.experience}}</td> </tr> {% endfor %} </tbody> </table> </div> </div> {% endif %} </div> </body> </html> # --- github file: resume_parser/parser_app/templates/messages.html --- {% messages %} <div class="messages" style="margin-top: 2%;"> {% message messages %} <div {% message.tags == 'error' %} class="alert alert-danger" {% else %} class="alert alert-{{ message.tags }} "{% endif %}> {% message.level == default_message_levels.error %}important: {% endif %} {{ message }} </div> {% endfor %} </div> {% endif %} # --- github file: resume_parser/parser_app/templates/navbar.html --- {% load static %} <nav class="navbar navbar-expand-md navbar-dark bg-dark sidebarnavigation" data-sidebarclass="navbar-dark bg-dark"> <a class="navbar-brand" href="{% url 'homepage' %}"> resume parser </a> <button class="navbar-toggler leftnavbartoggler" type="button" data-toggle="collapse" data-target="#navbarnav" aria-controls="navbarnav" aria-expanded="false" aria-label="toggle navigation"> <span class="navbar-toggler-icon"></span> </button> <div class="navbar-collapse collapse" id="navbarnav"> <ul class="navbar-nav ml-auto"> <li class="nav-item {% request.resolver_match.url_name == 'login' %} active {% endif %}"> <a class="nav-link" href="{% url 'homepage'%}">homepage</a> </li> </ul> </div> </nav> # --- github file: resume_parser/parser_app/templatetags/active.py --- django import template django.shortcuts import reverse register = template.library() @register.simple_tag def add_active(request, name, slug): slug: path = reverse(name, kwargs={'slug': slug}) else : path = reverse(name) print(path) request.path == path: return "active" return "" @register.filter(name='add_css') def add_css(field, css): """removes values arg given string""" return field.as_widget(attrs={"class": css}) @register.filter def index(list, i): return list[int(i)] # --- github file: resume_parser/parser_app/tests.py --- django.test import testcase # create tests here. # --- github file: resume_parser/parser_app/urls.py --- """resume_parser.parser_app url configuration `urlpatterns` list routes urls views. information please see: https://docs.djangoproject.com/en/2.1/topics/http/urls/ examples: function views 1. add import: my_app import views 2. add url urlpatterns: path('', views.home, name='home') class-based views 1. add import: other_app.views import home 2. add url urlpatterns: path('', home.as_view(), name='home') including another urlconf 1. import include() function: django.urls import include, path 2. add url urlpatterns: path('blog/', include('blog.urls')) """ django.urls import path, include . import views django.conf import settings django.conf.urls.static import static urlpatterns = [ path('', views.homepage, name='homepage'), ] + static(settings.media_url, document_root=settings.media_root) # --- github file: resume_parser/parser_app/views.py --- django.shortcuts import render, redirect pyresparser import resumeparser .models import resume, uploadresumemodelform django.contrib import messages django.conf import settings django.db import integrityerror django.http import httpresponse, fileresponse, http404 import os def homepage(request): request.method == 'post': resume.objects.all().delete() file_form = uploadresumemodelform(request.post, request.files) files = request.files.getlist('resume') resumes_data = [] file_form.is_valid(): file files: try: # saving file resume = resume(resume=file) resume.save() # extracting resume entities parser = resumeparser(os.path.join(settings.media_root, resume.resume.name)) data = parser.get_extracted_data() resumes_data.append(data) resume.name = data.get('name') resume.email = data.get('email') resume.mobile_number = data.get('mobile_number') data.get('degree') none: resume.education = ', '.join(data.get('degree')) else: resume.education = none resume.company_names = data.get('company_names') resume.college_name = data.get('college_name') resume.designation = data.get('designation') resume.total_experience = data.get('total_experience') data.get('skills') none: resume.skills = ', '.join(data.get('skills')) else: resume.skills = none data.get('experience') none: resume.experience = ', '.join(data.get('experience')) else: resume.experience = none resume.save() except integrityerror: messages.warning(request, 'duplicate resume found:', file.name) return redirect('homepage') resumes = resume.objects.all() messages.success(request, 'resumes uploaded!') context = { 'resumes': resumes, } return render(request, 'base.html', context) else: form = uploadresumemodelform() return render(request, 'base.html', {'form': form}) # --- github file: resume_parser/pre_requisites.py --- import os import nltk # install spacy dependencies os.system('python -m pip install https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-2.3.1/en_core_web_sm-2.3.1.tar.gz') # install nltk dependencies nltk.download('maxent_ne_chunker') nltk.download('words') nltk.download('stopwords') nltk.download('punkt') nltk.download('wordnet') nltk.download('averaged_perceptron_tagger') # --- github file: resume_parser/requirements.txt --- django==2.2.10 django-crispy-forms==1.7.2 pyresparser gunicorn spacy==2.3.5 # --- github file: resume_parser/resume_parser/__init__.py --- # --- github file: resume_parser/resume_parser/constants.py --- nltk.corpus import stopwords # omkar pathak name_pattern = [{'pos': 'propn'}, {'pos': 'propn'}] # education (upper case mandatory) education = [ 'be','b.e.', 'b.e', 'bs', 'b.s', 'me', 'm.e', 'm.e.', 'ms', 'm.s', 'btech', 'mtech', 'ssc', 'hsc', 'cbse', 'icse', 'x', 'xii' ] not_alpha_numeric = r'[^a-za-z\d]' number = r'\d+' # finding date ranges months_short = r'(jan)|(feb)|(mar)|(apr)|(may)|(jun)|(jul)|(aug)|(sep)|(oct)|(nov)|(dec)' months_long = r'(january)|(february)|(march)|(april)|(may)|(june)|(july)|(august)|(september)|(october)|(november)|(december)' month = r'(' + months_short + r'|' + months_long + r')' year = r'(((20|19)(\d{2})))' stopwords = set(stopwords.words('english')) resume_sections = [ 'accomplishments', 'experience', 'education', 'interests', 'projects', 'professional experience', 'publications', 'skills', ] competencies = { 'teamwork': [ 'supervised', 'facilitated', 'planned', 'plan', 'served', 'serve', 'project lead', 'managing', 'managed', 'lead ', 'project team', 'team', 'conducted', 'worked', 'gathered', 'organized', 'mentored', 'assist', 'review', 'help', 'involve', 'share', 'support', 'coordinate', 'cooperate', 'contributed' ], 'communication': [ 'addressed', 'collaborated', 'conveyed', 'enlivened', 'instructed', 'performed', 'presented', 'spoke', 'trained', 'author', 'communicate', 'define', 'influence', 'negotiated', 'outline', 'proposed', 'persuaded', 'edit', 'interviewed', 'summarize', 'translate', 'write', 'wrote', 'project plan', 'business case', 'proposal', 'writeup' ], 'analytical': [ 'process improvement', 'competitive analysis', 'aligned', 'strategive planning', 'cost savings', 'researched ', 'identified', 'created', 'led', 'measure', 'program', 'quantify', 'forecasr', 'estimate', 'analyzed', 'survey', 'reduced', 'cut cost', 'conserved', 'budget', 'balanced', 'allocate', 'adjust', 'lauched', 'hired', 'spedup', 'speedup', 'ran', 'run', 'enchanced', 'developed' ], 'result_driven': [ 'cut', 'decrease', 'eliminate', 'increase', 'lower', 'maximize', 'rasie', 'reduce', 'accelerate', 'accomplish', 'advance', 'boost', 'change', 'improve', 'saved', 'save', 'solve', 'solved', 'upgrade', 'fix', 'fixed', 'correct', 'achieve' ], 'leadership': [ 'advise', 'coach', 'guide', 'influence', 'inspire', 'instruct', 'teach', 'authorized', 'chair', 'control', 'establish', 'execute', 'hire', 'multi-task', 'oversee', 'navigate', 'prioritize', 'approve', 'administer', 'preside', 'enforce', 'delegate', 'coordinate', 'streamlined', 'produce', 'review', 'supervise', 'terminate', 'found', 'set up', 'spearhead', 'originate', 'innovate', 'implement', 'design', 'launch', 'pioneer', 'institute' ] } measurable_results = { 'metrics': [ 'saved', 'increased', '$ ', '%', 'percent', 'upgraded', 'fundraised ', 'millions', 'thousands', 'hundreds', 'reduced annual expenses ', 'profits', 'growth', 'sales', 'volume', 'revenue', 'reduce cost', 'cut cost', 'forecast', 'increase page views', 'user engagement', 'donations', 'number cases closed', 'customer ratings', 'client retention', 'tickets closed', 'response time', 'average', 'reduced customer complaints', 'managed budget', 'numeric_value' ], 'action_words': [ 'developed', 'led', 'analyzed', 'collaborated', 'conducted', 'performed', 'recruited', 'improved', 'founded', 'transformed', 'composed', 'conceived', 'designed', 'devised', 'established', 'generated', 'implemented', 'initiated', 'instituted', 'introduced', 'launched', 'opened', 'originated', 'pioneered', 'planned', 'prepared', 'produced', 'promoted', 'started', 'released', 'administered', 'assigned', 'chaired', 'consolidated', 'contracted', 'co-ordinated', 'delegated', 'directed', 'evaluated', 'executed', 'organized', 'oversaw', 'prioritized', 'recommended', 'reorganized', 'reviewed', 'scheduled', 'supervised', 'guided', 'advised', 'coached', 'demonstrated', 'illustrated', 'presented', 'taught', 'trained', 'mentored', 'spearheaded', 'authored', 'accelerated', 'achieved', 'allocated', 'completed', 'awarded', 'persuaded', 'revamped', 'influenced', 'assessed', 'clarified', 'counseled', 'diagnosed', 'educated', 'facilitated', 'familiarized', 'motivated', 'participated', 'provided', 'referred', 'rehabilitated', 'reinforced', 'represented', 'moderated', 'verified', 'adapted', 'coordinated', 'enabled', 'encouraged', 'explained', 'informed', 'instructed', 'lectured', 'stimulated', 'classified', 'collated', 'defined', 'forecasted', 'identified', 'interviewed', 'investigated', 'researched', 'tested', 'traced', 'interpreted', 'uncovered', 'collected', 'critiqued', 'examined', 'extracted', 'inspected', 'inspired', 'summarized', 'surveyed', 'systemized', 'arranged', 'budgeted', 'controlled', 'eliminated', 'itemised', 'modernised', 'operated', 'organised', 'processed', 'redesigned', 'reduced', 'refined', 'resolved', 'revised', 'simplified', 'solved', 'streamlined', 'appraised', 'audited', 'balanced', 'calculated', 'computed', 'projected', 'restructured', 'modelled', 'customized', 'fashioned', 'integrated', 'proved', 'revitalized', 'set up', 'shaped', 'structured', 'tabulated', 'validated', 'approved', 'catalogued', 'compiled', 'dispatched', 'filed', 'monitored', 'ordered', 'purchased', 'recorded', 'retrieved', 'screened', 'specified', 'systematized', 'conceptualized', 'brainstomed', 'tasked', 'supported', 'proposed', 'boosted', 'earned', 'negotiated', 'navigated', 'updated', 'utilized' ], 'weak_words': [ 'i', 'got', 'i\'ve', 'because', 'our', 'me', 'he', 'her', 'him', 'she', 'helped', 'familiar', 'asssisted', 'like', 'enjoy', 'love', 'did', 'tried', 'attempted', 'worked', 'approximately', 'managed', 'manage', 'create', 'created' ] } # --- github file: resume_parser/resume_parser/resume_parser.py --- # author: omkar pathak import os . import utils import spacy import pprint spacy.matcher import matcher import multiprocessing mp class resumeparser(object): def __init__(self, resume): nlp = spacy.load('en_core_web_sm') self.__matcher = matcher(nlp.vocab) self.__details = { 'name' : none, 'email' : none, 'mobile_number' : none, 'skills' : none, 'education' : none, 'experience' : none, 'competencies' : none, 'measurable_results': none } self.__resume = resume self.__text_raw = utils.extract_text(self.__resume, os.path.splitext(self.__resume)[1]) self.__text = ' '.join(self.__text_raw.split()) self.__nlp = nlp(self.__text) self.__noun_chunks = list(self.__nlp.noun_chunks) self.__get_basic_details() def get_extracted_data(self): return self.__details def __get_basic_details(self): name = utils.extract_name(self.__nlp, matcher=self.__matcher) email = utils.extract_email(self.__text) mobile = utils.extract_mobile_number(self.__text) skills = utils.extract_skills(self.__nlp, self.__noun_chunks) edu = utils.extract_education([sent.string.strip() sent self.__nlp.sents]) experience = utils.extract_experience(self.__text) entities = utils.extract_entity_sections(self.__text_raw) self.__details['name'] = name self.__details['email'] = email self.__details['mobile_number'] = mobile self.__details['skills'] = skills # self.__details['education'] = entities['education'] self.__details['education'] = edu self.__details['experience'] = experience try: self.__details['competencies'] = utils.extract_competencies(self.__text_raw, entities['experience']) self.__details['measurable_results'] = utils.extract_measurable_results(self.__text_raw, entities['experience']) except keyerror: self.__details['competencies'] = [] self.__details['measurable_results'] = [] return def resume_result_wrapper(resume): parser = resumeparser(resume) return parser.get_extracted_data() __name__ == '__main__': pool = mp.pool(mp.cpu_count()) resumes = [] data = [] root, directories, filenames os.walk('resumes'): filename filenames: file = os.path.join(root, filename) resumes.append(file) results = [pool.apply_async(resume_result_wrapper, args=(x,)) x resumes] results = [p.get() p results] pprint.pprint(results) # --- github file: resume_parser/resume_parser/settings.py --- """ django settings resume_parser project. generated 'django-admin startproject' using django 2.1.4. information file, see https://docs.djangoproject.com/en/2.1/topics/settings/ full list settings values, see https://docs.djangoproject.com/en/2.1/ref/settings/ """ import os # build paths inside project like this: os.path.join(base_dir, ...) base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) # quick-start development settings - unsuitable production # see https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/ # security warning: keep secret key used production secret! secret_key = 'fa^pq*c1#+6_(6jgxxr&2o-9bt$5u_f=aldx0yceaed3#c1b^b' # security warning: run debug turned production! debug = true allowed_hosts = ['*'] # application definition installed_apps = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'crispy_forms', 'parser_app', ] middleware = [ 'django.middleware.security.securitymiddleware', 'django.contrib.sessions.middleware.sessionmiddleware', 'django.middleware.common.commonmiddleware', 'django.middleware.csrf.csrfviewmiddleware', 'django.contrib.auth.middleware.authenticationmiddleware', 'django.contrib.messages.middleware.messagemiddleware', 'django.middleware.clickjacking.xframeoptionsmiddleware', ] root_urlconf = 'resume_parser.urls' templates = [ { 'backend': 'django.template.backends.django.djangotemplates', 'dirs': [os.path.join(base_dir, 'templates')], 'app_dirs': true, 'options': { 'context_processors': [ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ], }, }, ] wsgi_application = 'resume_parser.wsgi.application' # database # https://docs.djangoproject.com/en/2.1/ref/settings/#databases databases = { 'default': { 'engine': 'django.db.backends.sqlite3', 'name': os.path.join(base_dir, 'db.sqlite3'), } } # password validation # https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators auth_password_validators = [ { 'name': 'django.contrib.auth.password_validation.userattributesimilarityvalidator', }, { 'name': 'django.contrib.auth.password_validation.minimumlengthvalidator', }, { 'name': 'django.contrib.auth.password_validation.commonpasswordvalidator', }, { 'name': 'django.contrib.auth.password_validation.numericpasswordvalidator', }, ] # internationalization # https://docs.djangoproject.com/en/2.1/topics/i18n/ language_code = 'en-us' time_zone = 'utc' use_i18n = true use_l10n = true use_tz = true # static files (css, javascript, images) # https://docs.djangoproject.com/en/2.1/howto/static-files/ static_url = '/staticfiles/' static_root = os.path.join(base_dir, 'staticfiles') # bootstrap crispy-forms config crispy_template_pack = 'bootstrap4' # uploading resume files media_root = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'mediafiles') media_url = '/mediafiles/' # user session expire browser close session_expire_at_browser_close = true session_cookie_age = 600 # set 10 minutes session_save_every_request = true # --- github file: resume_parser/resume_parser/urls.py --- """resume_parser url configuration `urlpatterns` list routes urls views. information please see: https://docs.djangoproject.com/en/2.1/topics/http/urls/ examples: function views 1. add import: my_app import views 2. add url urlpatterns: path('', views.home, name='home') class-based views 1. add import: other_app.views import home 2. add url urlpatterns: path('', home.as_view(), name='home') including another urlconf 1. import include() function: django.urls import include, path 2. add url urlpatterns: path('blog/', include('blog.urls')) """ django.contrib import admin django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path('', include('parser_app.urls')) ] # --- github file: resume_parser/resume_parser/utils.py --- # author: omkar pathak import io import os import import nltk import spacy import pandas pd import docx2txt . import constants cs spacy.matcher import matcher pdfminer.converter import textconverter pdfminer.pdfinterp import pdfpageinterpreter pdfminer.pdfinterp import pdfresourcemanager pdfminer.layout import laparams pdfminer.pdfpage import pdfpage nltk.stem import wordnetlemmatizer nltk.corpus import stopwords def extract_text_from_pdf(pdf_path): ''' helper function extract plain text .pdf files :param pdf_path: path pdf file extracted :return: iterator string extracted text ''' # https://www.blog.pythonlibrary.org/2018/05/03/exporting-data-from-pdfs-with-python/ open(pdf_path, 'rb') fh: page pdfpage.get_pages(fh, caching=true, check_extractable=true): resource_manager = pdfresourcemanager() fake_file_handle = io.stringio() converter = textconverter(resource_manager, fake_file_handle, codec='utf-8', laparams=laparams()) page_interpreter = pdfpageinterpreter(resource_manager, converter) page_interpreter.process_page(page) text = fake_file_handle.getvalue() yield text # close open handles converter.close() fake_file_handle.close() def extract_text_from_doc(doc_path): ''' helper function extract plain text .doc .docx files :param doc_path: path .doc .docx file extracted :return: string extracted text ''' temp = docx2txt.process(doc_path) text = [line.replace('\t', ' ') line temp.split('\n') line] return ' '.join(text) def extract_text(file_path, extension): ''' wrapper function detect file extension call text extraction function accordingly :param file_path: path file text extracted :param extension: extension file `file_name` ''' text = '' extension == '.pdf': page extract_text_from_pdf(file_path): text += ' ' + page elif extension == '.docx' extension == '.doc': text = extract_text_from_doc(file_path) return text def extract_entity_sections(text): ''' helper function extract raw text sections resume :param text: raw text resume :return: dictionary entities ''' text_split = [i.strip() text.split('\n')] # sections_in_resume = [i text_split i.lower() sections] entities = {} key = false phrase text_split: len(phrase) == 1: p_key = phrase else: p_key = set(phrase.lower().split()) & set(cs.resume_sections) try: p_key = list(p_key)[0] except indexerror: pass p_key cs.resume_sections: entities[p_key] = [] key = p_key elif key phrase.strip(): entities[key].append(phrase) # entity_key = false # entity entities.keys(): # sub_entities = {} # entry entities[entity]: # u'\u2022' entry: # sub_entities[entry] = [] # entity_key = entry # elif entity_key: # sub_entities[entity_key].append(entry) # entities[entity] = sub_entities # pprint.pprint(entities) # make entities found none # entity cs.resume_sections: # entity entities.keys(): # entities[entity] = none return entities def extract_email(text): ''' helper function extract email id text :param text: plain text extracted resume file ''' email = re.findall("([^@|\s]+@[^@]+\.[^@|\s]+)", text) email: try: return email[0].split()[0].strip(';') except indexerror: return none def extract_name(nlp_text, matcher): ''' helper function extract name spacy nlp text :param nlp_text: object `spacy.tokens.doc.doc` :param matcher: object `spacy.matcher.matcher` :return: string full name ''' pattern = [cs.name_pattern] matcher.add('name', none, *pattern) matches = matcher(nlp_text) match_id, start, end matches: span = nlp_text[start:end] return span.text def extract_mobile_number(text): ''' helper function extract mobile number text :param text: plain text extracted resume file :return: string extracted mobile numbers ''' # found complicated regex : https://zapier.com/blog/extract-links-email-phone-regex/ phone = re.findall(re.compile(r'(?:(?:\+?([1-9]|[0-9][0-9]|[0-9][0-9][0-9])\s*(?:[.-]\s*)?)?(?:\(\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\s*\)|([0-9][1-9]|[0-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\s*(?:[.-]\s*)?)?([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\s*(?:[.-]\s*)?([0-9]{4})(?:\s*(?:#|x\.?|ext\.?|extension)\s*(\d+))?'), text) phone: number = ''.join(phone[0]) len(number) > 10: return '+' + number else: return number def extract_skills(nlp_text, noun_chunks): ''' helper function extract skills spacy nlp text :param nlp_text: object `spacy.tokens.doc.doc` :param noun_chunks: noun chunks extracted nlp text :return: list skills extracted ''' tokens = [token.text token nlp_text token.is_stop] data = pd.read_csv(os.path.join(os.path.dirname(__file__), 'skills.csv')) skills = list(data.columns.values) skillset = [] # check one-grams token tokens: token.lower() skills: skillset.append(token) # check bi-grams tri-grams token noun_chunks: token = token.text.lower().strip() token skills: skillset.append(token) return [i.capitalize() set([i.lower() skillset])] def cleanup(token, lower = true): lower: token = token.lower() return token.strip() def extract_education(nlp_text): ''' helper function extract education spacy nlp text :param nlp_text: object `spacy.tokens.doc.doc` :return: tuple education degree year year found else returns education degree ''' edu = {} # extract education degree index, text enumerate(nlp_text): tex text.split(): tex = re.sub(r'[?|$|.|!|,]', r'', tex) tex.upper() cs.education tex cs.stopwords: edu[tex] = text + nlp_text[index + 1] # extract year education = [] key edu.keys(): year = re.search(re.compile(cs.year), edu[key]) year: education.append((key, ''.join(year.group(0)))) else: education.append(key) return education def extract_experience(resume_text): ''' helper function extract experience resume text :param resume_text: plain resume text :return: list experience ''' wordnet_lemmatizer = wordnetlemmatizer() stop_words = set(stopwords.words('english')) # word tokenization word_tokens = nltk.word_tokenize(resume_text) # remove stop words lemmatize filtered_sentence = [w w word_tokens w stop_words wordnet_lemmatizer.lemmatize(w) stop_words] sent = nltk.pos_tag(filtered_sentence) # parse regex cp = nltk.regexpparser('p: {<nnp>+}') cs = cp.parse(sent) # cs.subtrees(filter=lambda x: x.label() == 'p'): # print(i) test = [] vp list(cs.subtrees(filter=lambda x: x.label()=='p')): test.append(" ".join([i[0] vp.leaves() len(vp.leaves()) >= 2])) # search word 'experience' chunk print text x = [x[x.lower().index('experience') + 10:] i, x enumerate(test) x 'experience' x.lower()] return x def extract_competencies(text, experience_list): ''' helper function extract competencies resume text :param resume_text: plain resume text :return: dictionary competencies ''' experience_text = ' '.join(experience_list) competency_dict = {} competency cs.competencies.keys(): item cs.competencies[competency]: string_found(item, experience_text): competency competency_dict.keys(): competency_dict[competency] = [item] else: competency_dict[competency].append(item) return competency_dict def extract_measurable_results(text, experience_list): ''' helper function extract measurable results resume text :param resume_text: plain resume text :return: dictionary measurable results ''' # scan measurable results first half sentence experience_text = ' '.join([text[:len(text) // 2 - 1] text experience_list]) mr_dict = {} mr cs.measurable_results.keys(): item cs.measurable_results[mr]: string_found(item, experience_text): mr mr_dict.keys(): mr_dict[mr] = [item] else: mr_dict[mr].append(item) return mr_dict def string_found(string1, string2): re.search(r"\b" + re.escape(string1) + r"\b", string2): return true return false # --- github file: resume_parser/resume_parser/wsgi.py --- """ wsgi config resume_parser project. exposes wsgi callable module-level variable named ``application``. information file, see https://docs.djangoproject.com/en/2.1/howto/deployment/wsgi/ """ import os django.core.wsgi import get_wsgi_application os.environ.setdefault('django_settings_module', 'resume_parser.settings') application = get_wsgi_application()